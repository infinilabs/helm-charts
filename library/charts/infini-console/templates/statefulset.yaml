
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "infini-console.fullname" . }}
  labels:
{{ include "infini-console.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "infini-console.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  serviceName: {{ template "infini-console.fullname" . }}-headless
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "infini-console.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{ if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
    {{- end }}
      restartPolicy: {{ .Values.restartPolicy }}
      initContainers:
        - name: init-{{ .Chart.Name }}
          image: "{{ .Values.image.name }}:{{ .Values.image.tag | required ".Values.image.tag entry is required!" }}"
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          command: ['sh', '-c', 'false | cp -ir /config_bak/* /config 2>/dev/null || true']
          volumeMounts:
            - name: infini-console-cfg
              mountPath: /config
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.name }}:{{ .Values.image.tag | required ".Values.image.tag entry is required!" }}"
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          env:
            - name: BOOTSTRAP_USERNAME
              value: admin
            - name: BOOTSTRAP_PASSWORD
              value: admin
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
          volumeMounts:
            - name: infini-console-config-yaml
              mountPath: /config.yml
              subPath: console.yml
              readOnly: true
            - name: infini-console-data
              mountPath: /data
            - name: infini-console-cfg
              mountPath: /config
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        # test
        # - name: ubuntu
        #   image: ubuntu:22.04
        #   command: ["/bin/bash", "-c", "--"]
        #   args: ["while true; do sleep 30; done;"]
        #   volumeMounts:
        #     - name: infini-console-data
        #       mountPath: /data
        #     - name: infini-console-cfg
        #       mountPath: /config
    {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- if .Values.rbac.create }}
      serviceAccountName: infini-console
    {{- end }}
      volumes:
        - name: infini-console-data
          emptyDir: {}
        - name: infini-console-cfg
          emptyDir: {}
        - name: infini-console-config-yaml
          secret:
            secretName: {{ template "infini-console.fullname" . }}
  volumeClaimTemplates:
    - metadata:
        name: infini-console-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: {{ .Values.storageClassName }}
        resources:
          requests:
            storage: 29Gi
    - metadata:
        name: infini-console-cfg
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: {{ .Values.storageClassName }}
        resources:
          requests:
            storage: 1Gi
        
